#  (Clash) 配置
# 更新日期：2025-01-24
# 作者: Young (https://t.me/weekin)
# 修改自官方示例规则 https://wiki.metacubex.one/example/#meta
# 转载请保留此注释
# 不理解的地方不要乱动

# true 是启用
# false 是禁用

# url 里填写自己的订阅,名称不能重复
proxy-providers:
  provider1:
    url: "订阅一"  # 订阅地址，请将 "订阅一" 替换为实际的订阅链接
    type: http  # 订阅的类型为 HTTP，通常是标准的订阅协议类型
    interval: 86400  # 每 86400 秒（即 24 小时）更新一次订阅
    health-check: 
      enable: true  # 启用健康检查，用于检测代理节点是否可用
      url: "https://www.gstatic.com/generate_204"  # 健康检查的目标地址，使用 Google 的无内容返回测试 URL
      interval: 60  # 每 60 秒执行一次健康检查
    override:
      additional-prefix: "[provider1]"  # 给每个节点添加前缀 "[provider1]"，用于标识节点来源
    filter: ^(?!.*(?:群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|\b(?:USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)\b)).*$

  provider2:
    url: "订阅二"
    type: http
    interval: 86400
    health-check: {enable: true,url: "https://www.gstatic.com/generate_204",interval: 60}
    override:
      additional-prefix: "[provider2]"
    filter: ^(?!.*(?:群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|\b(?:USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)\b)).*$

  provider3:
    url: "订阅三"
    type: http
    interval: 86400
    health-check: {enable: true,url: "https://www.gstatic.com/generate_204",interval: 60}
    override:
      additional-prefix: "[provider3]"
    filter: ^(?!.*(?:群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|\b(?:USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)\b)).*$

#proxies: 
#  - name: "DIRECT"
#    type: direct
#    udp: true

mixed-port: 7890  # 设置混合端口，Clash 将同时处理 HTTP、HTTPS 和 SOCKS5 流量，默认端口为 7890
ipv6: true  # 启用 IPv6 支持，如果你的网络环境不支持 IPv6，可以将其设置为 false
allow-lan: true  # 允许局域网访问，适用于局域网设备共享代理
unified-delay: false  # 是否启用统一延迟计算，通常保留为 false
tcp-concurrent: true  # 启用并发 TCP 连接，提升代理的并发处理能力

external-controller: 127.0.0.1:9090  # 配置外部控制接口地址和端口，便于通过 GUI 管理 Clash
external-ui: ui  # 指定外部 UI 的目录名称或路径
external-ui-url: "https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"  # 外部 UI 的下载链接，用于更新界面

find-process-mode: strict  # 查找进程模式，`strict` 表示严格匹配
global-client-fingerprint: chrome  # 设置全局客户端指纹，用于模拟浏览器的指纹，`chrome` 是常见的默认选项

profile:  # 配置文件存储相关选项
  store-selected: true  # 启用后，将存储用户选择的代理和规则
  store-fake-ip: true  # 启用后，将存储伪造 IP 的映射记录

sniffer:  # 流量嗅探配置
  enable: true  # 启用流量嗅探功能
  sniff:  # 设置流量嗅探的规则
    HTTP:
      ports: [80, 8080-8880]  # HTTP 流量嗅探的端口范围
      override-destination: true  # 启用后，嗅探到的目标地址会覆盖原目标地址
    TLS:
      ports: [443, 8443]  # TLS 流量嗅探的端口范围
    QUIC:
      ports: [443, 8443]  # QUIC 流量嗅探的端口范围
  skip-domain:  # 设置嗅探时跳过的域名
    - "Mijia Cloud"  # 米家云相关域名，避免影响设备正常工作
    - "+.push.apple.com"  # Apple 推送服务域名，避免嗅探导致推送服务异常


tun:  # 配置 TUN 模式
  enable: true  # 启用 TUN 模式，用于将系统层面的所有流量重定向到 Clash
  stack: mixed  # TUN 栈类型，`mixed` 支持 IPv4 和 IPv6
  dns-hijack:  # 劫持 DNS 请求
    - "any:53"  # 劫持任意地址的 53 端口（UDP）
    - "tcp://any:53"  # 劫持任意地址的 53 端口（TCP）
  auto-route: true  # 自动设置路由规则，将数据流量转发到 Clash
  auto-redirect: true  # 自动重定向流量，确保 TUN 模式生效
  auto-detect-interface: true  # 自动检测网卡接口，适配多网卡环境

dns:  # 配置 Clash 的 DNS 模块
  enable: true  # 启用 Clash 的内置 DNS 服务
  ipv6: true  # 支持 IPv6 的 DNS 解析
  respect-rules: true  # 遵循规则对 DNS 请求的处理
  enhanced-mode: fake-ip  # 使用伪造 IP 模式提升 DNS 分流精度
  fake-ip-filter:  # 设置伪造 IP 模式下的过滤规则，以下域名将跳过伪造 IP
    - "*"  # 默认跳过所有域名（不使用 fake-ip）
    - "+.lan"  # 跳过局域网域名解析
    - "+.local"  # 跳过本地域名解析
    - "+.market.xiaomi.com"  # 跳过小米应用市场的域名解析

  nameserver:  # 基础 DNS 服务器列表
    - https://120.53.53.53/dns-query  # 中国大陆 DNS 服务，支持 DoH（HTTPS 协议）
    - https://223.5.5.5/dns-query  # 阿里公共 DNS，支持 DoH
  proxy-server-nameserver:  # 代理下的 DNS 服务器
    - https://120.53.53.53/dns-query  # 中国大陆 DNS 服务
    - https://223.5.5.5/dns-query  # 阿里公共 DNS 服务

  nameserver-policy:  # 按规则集指定使用的 DNS 服务器
    "rule-set:cn_domain,private_domain":  # 针对中国域名和私有域名的规则
      - https://120.53.53.53/dns-query  # 使用中国 DNS
      - https://223.5.5.5/dns-query
    "rule-set:geolocation-!cn":  # 针对非中国域名的规则
      - "https://dns.cloudflare.com/dns-query"  # 使用 Cloudflare DNS
      - "https://dns.google/dns-query"  # 使用 Google DNS


proxy-groups:

  # 主代理组
  - name: Proxy  # 主代理组，用于选择默认的代理策略
    type: select  # 手动选择代理
    proxies: [AUTO, ALL, DIRECT, HK, TW, JP, SG, KR, US, Other]  # 可用的代理选项
    icon: 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Proxy.png'  # 图标链接，用于美化界面

  # 最终流量处理
  - name: Final  # 处理所有未被规则匹配的流量
    type: select  # 手动选择策略
    proxies: [Proxy, DIRECT]  # 默认走 Proxy，也可以选择 DIRECT（直连）
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/Final.png'

  # 广告拦截
  - name: Advertising  # 广告处理组
    type: select
    proxies: [REJECT, DIRECT]  # 默认拒绝广告，也可以选择直连
    icon: 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Advertising.png'

  # Google 服务
  - name: Google
    type: select
    proxies: [Proxy, AUTO, ALL, DIRECT, HK, TW, JP, SG, KR, US, Other]
    icon: 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Google.png'

  # Telegram 应用
  - name: Telegram
    type: select
    proxies: [Proxy, AUTO, ALL, DIRECT, HK, TW, JP, SG, KR, US, Other]
    icon: 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Telegram.png'

  # Twitter 应用
  - name: Twitter
    type: select
    proxies: [Proxy, AUTO, ALL, DIRECT, HK, TW, JP, SG, KR, US, Other]
    icon: 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Twitter.png'

  # BiliBili 流量
  - name: BiliBili
    type: select
    proxies: [DIRECT, TW]  # BiliBili 默认直连，也可以选择台湾节点
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/bilibili.png'

  # 巴哈姆特动漫疯
  - name: Bahamut
    type: select
    proxies: [TW, Proxy]  # 台湾优先
    icon: 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Bahamut.png'

  # YouTube 流量
  - name: YouTube
    type: select
    proxies: [Proxy, AUTO, ALL, DIRECT, HK, TW, JP, SG, KR, US, Other]
    icon: 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube.png'

  # Netflix 流量
  - name: NETFLIX
    type: select
    proxies: [Proxy, AUTO, ALL, DIRECT, HK, TW, JP, SG, KR, US, Other]
    icon: 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Netflix.png'

  # Spotify 音乐
  - name: Spotify
    type: select
    proxies: [Proxy, AUTO, ALL, DIRECT, HK, TW, JP, SG, KR, US, Other]
    icon: 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Spotify.png'

  # Github 代码托管
  - name: Github
    type: select
    proxies: [Proxy, AUTO, ALL, DIRECT, HK, TW, JP, SG, KR, US, Other]
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/github.png'

  # TikTok
  - name: TikTok
    type: select
    proxies: [Proxy, AUTO, ALL, DIRECT, TW, JP, SG, KR, US, Other]
    icon: 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/TikTok.png'

  # OpenAI 应用
  - name: OpenAI
    type: select
    proxies: [ChatGPT, US]  # 专门为 OpenAI（如 ChatGPT）选择的代理
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/OpenAI.png'

  # Microsoft 服务
  - name: Microsoft
    type: select
    proxies: [Proxy, AUTO, ALL, DIRECT, HK, TW, JP, SG, KR, US, Other]
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/Microsoft.png'

  # Instagram 应用
  - name: Instagram
    type: select
    proxies: [Proxy, AUTO, ALL, DIRECT, HK, TW, JP, SG, KR, US, Other]
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/Instagram.png'

  # 全球流媒体服务
  - name: GlobalMedia
    type: select
    proxies: [Proxy, AUTO, ALL, DIRECT, HK, TW, JP, SG, KR, US, Other]
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/Streaming.png'

    
     #分隔,下面是地区分组
  proxy-groups:

  # 香港代理组
  - name: HK  # 香港节点分组
    type: url-test  # 通过延迟测试自动选择最低延迟的节点
    include-all: true  # 包括所有节点
    filter: "(?i)港|hk|hongkong|hong kong"  # 正则匹配节点名称中包含“港”、“hk”、“hongkong”等关键词
    tolerance: 50  # 容忍延迟（毫秒）
    interval: 300  # 每 300 秒测试一次延迟
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/HK.png'  # 图标链接，用于 GUI 界面

  # 台湾代理组
  - name: TW  # 台湾节点分组
    type: url-test
    include-all: true
    filter: "(?i)台|tw|taiwan"  # 匹配节点名称中包含“台”、“tw”、“taiwan”
    tolerance: 50
    interval: 300
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/TW.png'

  # 日本代理组
  - name: JP  # 日本节点分组
    type: url-test
    include-all: true
    filter: "(?i)日|jp|japan"  # 匹配节点名称中包含“日”、“jp”、“japan”
    tolerance: 50
    interval: 300
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/JP.png'

  # 韩国代理组
  - name: KR  # 韩国节点分组
    type: url-test
    include-all: true
    filter: "(?i)(韩|KR|kr|Korea)"  # 匹配节点名称中包含“韩”、“kr”、“korea”
    tolerance: 50
    interval: 300
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/KR.png'

  # 美国代理组
  - name: US  # 美国节点分组
    type: url-test
    include-all: true
    filter: "(?i)美|us|unitedstates|united states"  # 匹配节点名称中包含“美”、“us”、“united states”
    tolerance: 50
    interval: 300
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/US.png'

  # 新加坡代理组
  - name: SG  # 新加坡节点分组
    type: url-test
    include-all: true
    filter: "(?i)(新|sg|singapore)"  # 匹配节点名称中包含“新”、“sg”、“singapore”
    tolerance: 50
    interval: 300
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/SG.png'

  # ChatGPT 专用组
  - name: ChatGPT  # 专用于 OpenAI 服务的节点分组
    type: url-test
    include-all: null  # 不使用默认包含所有节点
    filter: null  # 不进行正则筛选
    tolerance: 50
    interval: 300
    use: [provider2]  # 指定从 provider2 中选择节点
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/OpenAI.png'

  # 其他代理组
  - name: Other  # 匹配非特定地区的节点
    type: url-test
    include-all: true
    filter: "(?i)^(?!.*(?:🇭🇰|🇯🇵|🇺🇸|🇸🇬|🇨🇳|港|hk|hongkong|台|tw|taiwan|日|jp|japan|新|sg|singapore|美|us|unitedstates)).*"  # 排除指定地区的节点
    tolerance: 50
    interval: 300
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/SS.png'

  # 所有节点组
  - name: ALL  # 包含所有节点的组
    type: select  # 手动选择代理
    use: [provider1, provider2, provider3]  # 使用三个订阅提供的节点
    tolerance: 50
    interval: 300
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/SSR.png'

  # 自动选择最低延迟的节点
  - name: AUTO
    type: url-test
    use: [provider1, provider2, provider3]  # 使用三个订阅提供的节点
    tolerance: 50
    interval: 300
    icon: 'https://ghp.ci/https://raw.githubusercontent.com/Orz-3/mini/master/Color/Urltest.png'


rules:
  # 广告拦截规则
  - DOMAIN-KEYWORD,googleads,REJECT
  - DOMAIN-SUFFIX,ads.inmobi.com,REJECT
  - DOMAIN-SUFFIX,adsappier.com,REJECT
  - DOMAIN-SUFFIX,amazon-adsystem.com,REJECT
  - DOMAIN-SUFFIX,appier.net,REJECT
  - DOMAIN-SUFFIX,appiersig.com,REJECT
  - DOMAIN-SUFFIX,bidder.criteo.com,REJECT
  - DOMAIN-SUFFIX,c.amazon-adsystem.com,REJECT
  - DOMAIN-SUFFIX,cdn2.inner-active.mobi,REJECT
  - DOMAIN-SUFFIX,cr.adsappier.com,REJECT
  - DOMAIN-SUFFIX,criteo.com,REJECT
  - DOMAIN-SUFFIX,googleads.g.doubleclick.net,REJECT
  - DOMAIN-SUFFIX,googleads.g.doubleclick-cn.net,REJECT
  - DOMAIN-SUFFIX,gum.criteo.com,REJECT
  - DOMAIN-SUFFIX,ow.pubmatic.com,REJECT
  - DOMAIN-SUFFIX,pubmatic.com,REJECT
  - DOMAIN-SUFFIX,sdk-dnt.ad.smaato.net,REJECT
  - DOMAIN-SUFFIX,sdk-events.inner-active.mobi,REJECT
  - DOMAIN-SUFFIX,smaato.net,REJECT
  - DOMAIN-SUFFIX,tappx.com,REJECT
  - DOMAIN-SUFFIX,wv.inner-active.mobi,REJECT

  # 需要走代理的规则
  - DOMAIN-SUFFIX,tktn.at,Proxy
  - DOMAIN-SUFFIX,tktn.be,Proxy
  - DOMAIN-SUFFIX,vm.talkatone.com,Proxy

  # 需要直连的规则
  - DOMAIN-SUFFIX,agkn.com,DIRECT
  - DOMAIN-SUFFIX,cohere.com,DIRECT
  - DOMAIN-SUFFIX,crashlytics.com,DIRECT
  - DOMAIN-SUFFIX,inmobi.com,DIRECT
  - DOMAIN-SUFFIX,inner-active.mobi,DIRECT
  - DOMAIN-SUFFIX,ip-api.com,DIRECT
  - DOMAIN-SUFFIX,kochava.com,DIRECT
  - DOMAIN-SUFFIX,mobilefuse.com,DIRECT
  - DOMAIN-SUFFIX,talkatone.com,DIRECT

  # IP 直连规则
  - IP-CIDR,205.164.56.0/24,DIRECT,no-resolve
  - IP-CIDR,216.172.154.0/24,DIRECT,no-resolve
  - IP-CIDR,50.117.27.0/24,DIRECT,no-resolve
  - IP-CIDR,63.251.124.0/24,DIRECT,no-resolve
  - IP-CIDR,69.46.75.0/24,DIRECT,no-resolve
  - RULE-SET,adrules_domain,Advertising
  - RULE-SET,adguard,Advertising
  - RULE-SET,Advertising_rule,Advertising
  - RULE-SET,AdvertisingMiTV_rule,Advertising
  - RULE-SET,private_ip,DIRECT,no-resolve
  - RULE-SET,github_rule,Github
  - RULE-SET,GoogleVoice_rule,US
  - RULE-SET,Line_rule,KR
  - RULE-SET,Whatsapp_rule,US
  - RULE-SET,Instagram_rule,Instagram
  - RULE-SET,youtube_rule,YouTube
  - RULE-SET,google_rule,Google
  - RULE-SET,telegram_rule,Telegram
  - RULE-SET,OpenAI_rule,OpenAI
  - RULE-SET,TikTok_rule,TikTok
  - RULE-SET,WeChat_rule,DIRECT
  - RULE-SET,Microsoft_rule,Microsoft
  - RULE-SET,netflix_rule,NETFLIX
  - RULE-SET,bilibili_rule,BiliBili
  - RULE-SET,bahamut_domain,Bahamut
  - RULE-SET,twitter_rule,Twitter
  - RULE-SET,spotify_rule,Spotify
  - RULE-SET,GlobalMedia_rule,GlobalMedia
  - RULE-SET,cn_domain,DIRECT
  - RULE-SET,Lan_rule,DIRECT
  - RULE-SET,ChinaMax_rule,DIRECT
  - RULE-SET,cn_ip,DIRECT
  - GEOIP,CN,DIRECT
  - RULE-SET,Proxy_rule,AUTO
  - RULE-SET,geolocation-!cn,AUTO
  - MATCH,Final

rule-anchor:  # 定义规则的锚点模板，便于复用
  ip: &ip  # IP 类规则模板
    type: http  # 远程规则的类型
    interval: 86400  # 每 86400 秒（即 24 小时）更新一次
    behavior: ipcidr  # IP 地址范围规则
    format: mrs  # 使用 MRS 格式

  domain: &domain  # 域名类规则模板
    type: http
    interval: 86400
    behavior: domain  # 域名规则
    format: mrs

  classical: &classical  # 传统 YAML 格式规则模板
    type: http
    interval: 86400
    behavior: classical  # 经典规则行为
    format: yaml

rule-providers:  # 定义远程规则提供者

  # ===== 去广告类规则 ===== #
  adguard:  # AdGuard 基础广告过滤规则
    type: http
    behavior: domain
    url: "https://raw.githubusercontent.com/AdguardTeam/AdGuardFilters/master/Filters/filter_2_Base/filter.txt"
    interval: 86400
    path: ./rules/adguard.yaml  # 本地存储路径

  adrules_domain:  # Cat's AdRules 广告规则
    <<: *domain
    url: "https://raw.githubusercontent.com/Cats-Team/AdRules/main/adrules-mihomo.mrs"

  Advertising_rule:  # 经典广告规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Advertising/Advertising_Classical.yaml"

  AdvertisingMiTV_rule:  # 小米电视广告规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/AdvertisingMiTV/AdvertisingMiTV.yaml"

  # ===== 社交网络类规则 ===== #
  twitter_rule:  # Twitter 专用规则
    <<: *domain
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Twitter/Twitter.yaml"

  telegram_rule:  # Telegram 专用规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram.yaml"

  WeChat_rule:  # 微信规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/WeChat/WeChat.yaml"

  Line_rule:  # LINE 应用规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Line/Line.yaml"

  Whatsapp_rule:  # WhatsApp 应用规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Whatsapp/Whatsapp.yaml"

  GoogleVoice_rule:  # Google Voice 专用规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GoogleVoice/GoogleVoice.yaml"

  # ===== 搜索引擎类规则 ===== #
  google_rule:  # Google 服务规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Google/Google.yaml"

  OpenAI_rule:  # OpenAI（如 ChatGPT）规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OpenAI/OpenAI.yaml"

  github_rule:  # GitHub 规则
    <<: *domain
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GitHub/GitHub.yaml"

  # ===== 视频流媒体类规则 ===== #
  youtube_rule:  # YouTube 流媒体规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.yaml"

  TikTok_rule:  # TikTok 视频规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/TikTok/TikTok.yaml"

  GlobalMedia_rule:  # 全球流媒体规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GlobalMedia/GlobalMedia.yaml"

  Instagram_rule:  # Instagram 规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Instagram/Instagram.yaml"

  netflix_rule:  # Netflix 流媒体规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Netflix/Netflix.yaml"

  bilibili_rule:  # BiliBili 规则
    <<: *domain
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/BiliBili/BiliBili.yaml"

  bahamut_domain:  # 巴哈姆特动漫疯规则
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bahamut.mrs"

  spotify_rule:  # Spotify 音乐规则
    <<: *domain
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Spotify/Spotify.yaml"

  # ===== 企业服务类规则 ===== #
  private_domain:  # 私有域名规则
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"

  cn_domain:  # 中国域名规则
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"

  ehentai_domain:  # E-Hentai 网站规则
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ehentai.mrs"

  Microsoft_rule:  # 微软服务规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Microsoft/Microsoft.yaml"

  Proxy_rule:  # 通用代理规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Proxy/Proxy.yaml"

  pixiv_domain:  # Pixiv 网站规则
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/pixiv.mrs"

  geolocation-!cn:  # 非中国地区规则
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"

  private_ip:  # 私有 IP 地址规则
    <<: *ip
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/private.mrs"

  cn_ip:  # 中国 IP 地址规则
    <<: *ip
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"

  Lan_rule:  # 局域网规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Lan/Lan.yaml"

  ChinaMax_rule:  # 中国流量规则
    <<: *classical
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMax/ChinaMax_Classical.yaml"

  
  
  
